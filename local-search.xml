<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构实习报告</title>
    <link href="/2023/06/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E4%B9%A0%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/06/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="一、马踏棋盘游戏开发"><a href="#一、马踏棋盘游戏开发" class="headerlink" title="一、马踏棋盘游戏开发"></a>一、马踏棋盘游戏开发</h1><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>设计一个国际象棋的马踏遍棋盘的演示程序。</p><h4 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h4><p>将马随机放在国际象棋的 8×8 棋盘 Board[0 ～ 7][0～7]的某个方格中，马按走棋规则进行移动。要求每个方格只进入一次，走遍棋盘上全部 64 个方格。编制递归和非递归程序，求出马的行走路线，并按求出的行走路线，将数字 1，2，…，64 依次填入一个 8×8 的方阵，输出之。</p><p>马能走的 8 种路径可能</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> hx[horseMove] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> hy[horseMove] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;;<br></code></pre></td></tr></table></figure><p>检查 horse 移动的合法性并且 horse 并未访问过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">checkHealth</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y,vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; maxSize &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; maxSize &amp;&amp; chess[x][y] == <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>递归遍历移动 horse 的写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">horseTour</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> moveCount, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (moveCount == maxSize * maxSize) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> nx = x + hx[i];<br><span class="hljs-type">int</span> ny = y + hy[i];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(nx, ny, chess)) &#123;<br>chess[nx][ny] = moveCount;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">horseTour</span>(nx, ny, moveCount + <span class="hljs-number">1</span>, chess)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>chess[nx][ny] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 回溯</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>该程序通过使用递归的方式实现了马的行走路线的计算。<br>程序先初始化一个 8×8 的棋盘，然后随机选择一个起始位置。<br>接下来，使用递归函数 horseMove 进行回溯搜索，按照马的走棋规则进行移动，并将移动次数依次填入棋盘中。<br>最后，通过 printChess 函数将填好数字的棋盘输出到控制台。</p></blockquote><p>非递归遍历移动 horse 的写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">horseMoving</span> <span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br>stack&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; st;<br>st.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(x, y));<br><br><span class="hljs-type">int</span> moveCout = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) &#123;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cur = st.<span class="hljs-built_in">top</span>();<br><span class="hljs-type">int</span> nx = cur.first;<br><span class="hljs-type">int</span> ny = cur.second;<br>st.<span class="hljs-built_in">pop</span>();<br><br>chess[nx][ny] = moveCout;<br><br><span class="hljs-keyword">if</span> (moveCout == maxSize * maxSize) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> cx = x + hx[i];<br><span class="hljs-type">int</span> cy = y + hy[i];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(cx, cy, chess)) &#123;<br>st.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(cx, cy));<br>&#125;<br>&#125;<br>moveCout++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>该程序使用了一个栈来模拟递归的过程。<br>开始时，将起始位置压入栈中，并设置移动次数为 1。然后进行循环，直到栈为空。在每次循环中，取出栈顶的位置，并进行移动和记录移动次数。<br>如果移动次数达到 64（棋盘上所有方格都被访问过），则返回 true。否则，尝试八个移动方向，并将合法的移动位置压入栈中。<br>最后，通过 print_board 函数将填好数字的棋盘输出到控制台。</p></blockquote><p><strong>提升</strong> :</p><ul><li>（1）打印当前的行走路线</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (moveCount == maxSize * maxSize) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Route: &quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printChess</span>(chess);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>因为已经统计出所以路径 所以将所有路径打印出来即可</p></blockquote><ul><li>（2）探讨每次选择位置的“最佳策略”，以减少回溯的次数</li></ul><blockquote><ol><li>对于当前位置(x, y)，计算所有可能的下一步位置，并统计每个位置的可行路径数。</li><li>选择可行路径数最少的位置作为下一个移动位置。</li><li>如果存在多个位置具有相同的最少可行路径数，可以随机选择其中一个</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-comment">// 统计接下来的路径</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countPath</span> <span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> nx = x + hx[i];<br><span class="hljs-type">int</span> ny = y + hy[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(nx, ny, chess)) &#123;<br>count++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-comment">// 对前后两条路径进行判断</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">comparePath</span><span class="hljs-params">(<span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>, <span class="hljs-number">3</span>&gt;&amp; path1, <span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>, <span class="hljs-number">3</span>&gt;&amp; path2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> path1[<span class="hljs-number">2</span>] &lt; path2[<span class="hljs-number">2</span>];<br>&#125;<br>   <span class="hljs-comment">// horse的递归写法 (修改后的</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">horseTouring</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> moveCount, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (moveCount == maxSize * maxSize) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>vector&lt;array&lt;<span class="hljs-type">int</span>, 3&gt;&gt; nicePath;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> nx = x + hx[i];<br><span class="hljs-type">int</span> ny = y + hy[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(nx, ny, chess)) &#123;<br><span class="hljs-type">int</span> count = <span class="hljs-built_in">countPath</span>(nx, ny, chess);<br>nicePath.<span class="hljs-built_in">push_back</span>(&#123;nx, ny, count&#125;);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (nicePath.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">sort</span>(nicePath.<span class="hljs-built_in">begin</span>(), nicePath.<span class="hljs-built_in">end</span>(), comparePath);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> move : nicePath) &#123;<br><span class="hljs-type">int</span> nx = move[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> ny = move[<span class="hljs-number">1</span>];<br><br>chess[nx][ny] = moveCount;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">horseTouring</span>(nx, ny, moveCount + <span class="hljs-number">1</span>, chess)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>chess[nx][ny] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 回溯</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>moveCout 函数用于计算某个位置的可行路径数。<br>comparePath 函数用于比较两个移动位置的可行路径数，用于排序。horseTouring 函数中，在选择下一个移动位置之前，计算所有可能的位置并统计它们的可行路径数。<br>然后，根据可行路径数对位置进行排序，选择可行路径数最少的位置作为下一个移动位置。</p></blockquote><p><strong>完整代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-keyword">using</span>  <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxSize = <span class="hljs-number">8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> horseMove = <span class="hljs-number">8</span>;<br><br><span class="hljs-comment">// horse的所有可能</span><br><span class="hljs-type">int</span> hx[horseMove] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> hy[horseMove] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-comment">// 检查horse移动的合法性并且未被访问过</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">checkHealth</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y,vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; maxSize &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; maxSize &amp;&amp; chess[x][y] == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 提升（2）探讨每次选择位置的“最佳策略”，以减少回溯的次数</span><br><span class="hljs-comment">// 统计接下来的路径</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countPath</span> <span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> nx = x + hx[i];<br><span class="hljs-type">int</span> ny = y + hy[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(nx, ny, chess)) &#123;<br>count++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-comment">// 对前后两条路径进行判断</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">comparePath</span><span class="hljs-params">(<span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>, <span class="hljs-number">3</span>&gt;&amp; path1, <span class="hljs-type">const</span> array&lt;<span class="hljs-type">int</span>, <span class="hljs-number">3</span>&gt;&amp; path2)</span> </span>&#123;<br><span class="hljs-keyword">return</span> path1[<span class="hljs-number">2</span>] &lt; path2[<span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-comment">// 打印棋盘结果</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printChess</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; maxSize; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; maxSize; j++) &#123;<br>cout &lt;&lt; chess[i][j] &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 提升（2）</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">horseTouring</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> moveCount, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (moveCount == maxSize * maxSize) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>vector&lt;array&lt;<span class="hljs-type">int</span>, 3&gt;&gt; nicePath;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> nx = x + hx[i];<br><span class="hljs-type">int</span> ny = y + hy[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(nx, ny, chess)) &#123;<br><span class="hljs-type">int</span> count = <span class="hljs-built_in">countPath</span>(nx, ny, chess);<br>nicePath.<span class="hljs-built_in">push_back</span>(&#123;nx, ny, count&#125;);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (nicePath.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">sort</span>(nicePath.<span class="hljs-built_in">begin</span>(), nicePath.<span class="hljs-built_in">end</span>(), comparePath);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> move : nicePath) &#123;<br><span class="hljs-type">int</span> nx = move[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> ny = move[<span class="hljs-number">1</span>];<br><br>chess[nx][ny] = moveCount;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">horseTouring</span>(nx, ny, moveCount + <span class="hljs-number">1</span>, chess)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>chess[nx][ny] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 回溯</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 递归遍历移动horse</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">horseTour</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> moveCount, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (moveCount == maxSize * maxSize) &#123;<br><span class="hljs-comment">// 提升（1）打印当前的行走路线</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Route: &quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">printChess</span>(chess);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> nx = x + hx[i];<br><span class="hljs-type">int</span> ny = y + hy[i];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(nx, ny, chess)) &#123;<br>chess[nx][ny] = moveCount;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">horseTour</span>(nx, ny, moveCount + <span class="hljs-number">1</span>, chess)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>chess[nx][ny] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 回溯</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 非递归遍历移动horse</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">horseMoving</span> <span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; chess)</span> </span>&#123;<br>stack&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; st;<br>st.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(x, y));<br><br><span class="hljs-type">int</span> moveCout = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) &#123;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; cur = st.<span class="hljs-built_in">top</span>();<br><span class="hljs-type">int</span> nx = cur.first;<br><span class="hljs-type">int</span> ny = cur.second;<br>st.<span class="hljs-built_in">pop</span>();<br><br>chess[nx][ny] = moveCout;<br><br><span class="hljs-keyword">if</span> (moveCout == maxSize * maxSize) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; horseMove; i++) &#123;<br><span class="hljs-type">int</span> cx = x + hx[i];<br><span class="hljs-type">int</span> cy = y + hy[i];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkHealth</span>(cx, cy, chess)) &#123;<br>st.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(cx, cy));<br>&#125;<br>&#125;<br>moveCout++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 初始化棋盘</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">chess</span>(maxSize, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(maxSize, <span class="hljs-number">-1</span>));<br><br><span class="hljs-comment">// 随机选择起始位置</span><br><span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-type">int</span> sx = <span class="hljs-built_in">rand</span>() % maxSize;<br><span class="hljs-type">int</span> sy = <span class="hljs-built_in">rand</span>() % maxSize;<br><br>chess[sx][sy] = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">horseTour</span>(sx, sy, <span class="hljs-number">2</span>, chess)) &#123;<br><span class="hljs-built_in">printChess</span>(chess);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;None&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-built_in">horseMoving</span>(sx, sy, chess);<br><span class="hljs-built_in">printChess</span>(chess);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Config java-environment Linux</title>
    <link href="/2023/06/03/Config-java-environment-Linux/"/>
    <url>/2023/06/03/Config-java-environment-Linux/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Config java-environment Win</title>
    <link href="/2023/06/03/Config-java-environment-Win/"/>
    <url>/2023/06/03/Config-java-environment-Win/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Computer Organization</title>
    <link href="/2023/05/27/Principles-of-computer-composition/"/>
    <url>/2023/05/27/Principles-of-computer-composition/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>408</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data structures and algorithms</title>
    <link href="/2023/05/27/Data-structures-and-algorithms/"/>
    <url>/2023/05/27/Data-structures-and-algorithms/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>408</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neovim guide</title>
    <link href="/2023/05/27/Neovim-guide/"/>
    <url>/2023/05/27/Neovim-guide/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Neovim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>neovim, nvim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Commands</title>
    <link href="/2023/05/27/Hexo-commands/"/>
    <url>/2023/05/27/Hexo-commands/</url>
    
    <content type="html"><![CDATA[<h3 id="hexo-init-命令用于初始化本地文件夹为网站的根目录"><a href="#hexo-init-命令用于初始化本地文件夹为网站的根目录" class="headerlink" title="hexo init: 命令用于初始化本地文件夹为网站的根目录"></a><code>hexo init</code>: 命令用于初始化本地文件夹为网站的根目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo init [folder]<br></code></pre></td></tr></table></figure><blockquote><p>folder 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</p></blockquote><h3 id="hexo-new-命令用于新建文章，一般可以简写为-hexo-n"><a href="#hexo-new-命令用于新建文章，一般可以简写为-hexo-n" class="headerlink" title="hexo new: 命令用于新建文章，一般可以简写为 hexo n"></a><code>hexo new</code>: 命令用于新建文章，一般可以简写为 <code>hexo n</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><ul><li>layout 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li>title 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li></ul><h3 id="hexo-publish-命令用于发表草稿，一般可以简写为hexo-p"><a href="#hexo-publish-命令用于发表草稿，一般可以简写为hexo-p" class="headerlink" title="hexo publish : 命令用于发表草稿，一般可以简写为hexo p"></a><code>hexo publish</code> : 命令用于发表草稿，一般可以简写为<code>hexo p</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo pushlish [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure><h3 id="hexo-draft-命令用于显示草稿"><a href="#hexo-draft-命令用于显示草稿" class="headerlink" title="hexo --draft : 命令用于显示草稿"></a><code>hexo --draft</code> : 命令用于显示草稿</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo --draft<br></code></pre></td></tr></table></figure><ul><li>显示 <code>source/_drafts</code> 文件中的草稿文章</li></ul><h3 id="hexo-generate-命令用于生成静态文件，一般可以简写为-hexo-g"><a href="#hexo-generate-命令用于生成静态文件，一般可以简写为-hexo-g" class="headerlink" title="hexo generate: 命令用于生成静态文件，一般可以简写为 hexo g"></a><code>hexo generate</code>: 命令用于生成静态文件，一般可以简写为 <code>hexo g</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo generate<br></code></pre></td></tr></table></figure><ul><li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价<br><a href="https://hexo.io/docs/generating">详细信息请参考</a></li></ul><h3 id="hexo-server-命令用于启动本地服务器，一般可以简写为-hexo-s"><a href="#hexo-server-命令用于启动本地服务器，一般可以简写为-hexo-s" class="headerlink" title="hexo server: 命令用于启动本地服务器，一般可以简写为 hexo s"></a><code>hexo server</code>: 命令用于启动本地服务器，一般可以简写为 <code>hexo s</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo server<br></code></pre></td></tr></table></figure><ul><li>p 选项，指定服务器端口，默认为 4000</li><li>i 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li>s 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul><blockquote><p>说明 ：运行服务器前需要安装 hexo-server 插件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-server --save<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/server.html">详细信息请参考</a></p><h3 id="hexo-deploy-命令用于部署网站，一般可以简写为-hexo-d"><a href="#hexo-deploy-命令用于部署网站，一般可以简写为-hexo-d" class="headerlink" title="hexo deploy: 命令用于部署网站，一般可以简写为 hexo d"></a><code>hexo deploy</code>: 命令用于部署网站，一般可以简写为 <code>hexo d</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo deploy<br></code></pre></td></tr></table></figure><ul><li><code>-g</code> 选项，指定生成后部署，与 <code>hexo g -d</code> 等价<blockquote><p>说明 ：部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明</p></blockquote></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br><span class="hljs-attr">branch:</span><span class="hljs-string">master</span><br><span class="hljs-attr">message:</span> <span class="hljs-string">自定义提交消息，默认为Site</span> <span class="hljs-attr">updated:</span> &#123;&#123; <span class="hljs-string">now(&#x27;YYYY-MM-DD</span> <span class="hljs-string">HH:mm:ss&#x27;)</span> &#125;&#125;<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/deployment.html">详细信息请参考</a></p><h3 id="hexo-clean-命令用于清理缓存文件，是一个比较常用的命令"><a href="#hexo-clean-命令用于清理缓存文件，是一个比较常用的命令" class="headerlink" title="hexo clean: 命令用于清理缓存文件，是一个比较常用的命令"></a><code>hexo clean</code>: 命令用于清理缓存文件，是一个比较常用的命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo clean<br></code></pre></td></tr></table></figure><p><strong>网站显示异常时可尝试此操作</strong></p><h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h3><ol><li><strong>hexo –safe</strong><br><code>hexo --safe</code>: 表示安全模式，用于禁用加载插件和脚本</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo --safe<br></code></pre></td></tr></table></figure><p><strong>安装新插件时遇到问题可尝试此操作</strong></p><ol start="2"><li><strong>hexo –debug</strong><br><code>hexo --debug</code>: 表示调试模式，用于将消息详细记录到终端和 debug.log 文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo --debug<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>hexo –silent</strong><br><code>hexo --silent</code>: 表示静默模式，用于静默输出到终端</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo --silent<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo-commands</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Build Blogs</title>
    <link href="/2023/05/26/Hexo-Github-blogs/"/>
    <url>/2023/05/26/Hexo-Github-blogs/</url>
    
    <content type="html"><![CDATA[<h1 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h1><ol><li>需要一个 <code>Github</code> 账号 如果没有可在 <a href="https://github.com/">官网</a> 申请</li><li>需要安装 <code>Git</code> <a href="https://git-scm.com/downloads">git 下载</a></li><li>需要安装 <code>Nodejs</code> <a href="https://nodejs.org/en/download">nodejs 下载</a></li></ol><h1 id="Create-repositories"><a href="#Create-repositories" class="headerlink" title="Create repositories"></a>Create repositories</h1><p>在 GitHub 中创建仓库<br>名字必须是: <code>Github的用户名.github.io</code></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>在新创建的仓库中 <code>create a new file</code><br>文件名字必须为： <code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>xmk的个人主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器中打开 <code>https://&lt;用户名&gt;.github.io</code></p><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p><a href="https://hexo.io/zh-cn/">官网</a></p><ul><li>安装：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ul><li>创建一个项目<code>hexo-blog</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo init hexo-blog<br><span class="hljs-built_in">cd</span> hexo-blog<br>npm install<br><br></code></pre></td></tr></table></figure><ul><li>本地启动</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><p>浏览器访问 <code>http://localhost:4000</code></p><h1 id="更换主题：Fluid"><a href="#更换主题：Fluid" class="headerlink" title="更换主题：Fluid"></a>更换主题：Fluid</h1><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 官网</a></p><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>更换主题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span> <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>本地启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问 <code>http://localhost:4000</code></p><h1 id="部署-Github"><a href="#部署-Github" class="headerlink" title="部署 Github"></a>部署 Github</h1><p>安装 hexo-deployer-git</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改根目录下的 <code>_config.yml</code> ，配置 <code>GitHub</code> 相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">token:</span> <span class="hljs-string">.....</span><br></code></pre></td></tr></table></figure><p>其中 <code>token </code> 为 <code>GitHub </code> 的 <code>Personal access tokens</code> ，获取方式如下图<br><img src="/img/token.png" alt="token"></p><p>部署到 Github</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g -d<br></code></pre></td></tr></table></figure><p>浏览器访问 <code>https://username.github.io</code></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo-github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2023/05/25/Git-commands/"/>
    <url>/2023/05/25/Git-commands/</url>
    
    <content type="html"><![CDATA[<ul><li><p><code>git config --global user.name &quot;xxx&quot;</code> :向 Git 提交自己身份（name）</p></li><li><p><code>git config --global user.email &quot;xxx@xx.com&quot;</code> :向 Git 提交自己身份（email）：</p></li><li><p><code>git init</code> :把当前文件夹变为一个 git 仓库 创建 git 仓库</p></li><li><p><code>git status</code> :查看当前仓库文件变化情况</p></li><li><p><code>git add</code> :添加修改（可使用 git add . 来添加当前仓库所有修改）</p></li><li><p><code>git diff</code> :本次还没有提交的更改（比较工作区与暂存区的区别）</p></li><li><p><code>git reset</code> :回滚，撤销提交操作</p></li><li><p><code>git commit -m &quot;xxx&quot;</code> :向 Git 提交内容： （xx 为对提交的内容进行描述）</p></li><li><p>让 Git 不提交某些文件&#x2F;忽略某些文件：创建文件 .gitignore 并在文件中添加文件名&#x2F;文件夹名 即可 （若 git 已经开始追踪某些文件 则需要 next step）</p></li><li><p><code>git rm --cached xx</code> :让 Git 不再追踪某个&#x2F;某些文件： （xx 为文件名）</p></li><li><p><code>git branch xx</code> :Git 添加分支（xx 为分支名）</p></li><li><p><code>git checkout xx</code> :Git 切换分支（xx 为分支名）</p></li><li><p><code>git merge xx</code> :合并分支（xx 为分支名）</p></li><li><p><code>git branch</code> :列出本地分支</p></li><li><p><code>git branch -d xx</code> :删除分支 (xx 为分支名，-D 强制删除)</p></li><li><p><code>git remote add origin xxx</code> :添加远程仓库： （xxx 为远程地址）</p></li><li><p><code>git push --set-upstream</code> :设置本地分支追踪远程分支</p></li><li><p><code>git clone xxx</code> :克隆仓库（xxx 为远程地址）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git-commands</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro Install</title>
    <link href="/2023/05/25/Manjaro-install-guide/"/>
    <url>/2023/05/25/Manjaro-install-guide/</url>
    
    <content type="html"><![CDATA[<h1 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h1><ol><li><p>Download mirror<br>Address: <a href="https://manjaro.org/download/">manjaro.ios</a></p></li><li><p>Make U-disk<br>Tool:<a href="https://rufus.ie/zh/">Rufus</a></p></li><li><p>Close something in UEFI<br>Turn off: <code>Secure Boot</code></p></li></ol><blockquote><p>How to into UEFI： resolve yourself</p></blockquote><h1 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h1><ol><li>Start OS from U-disk</li><li>Connect Internet</li><li>Start Install</li><li>Reboot</li></ol><blockquote><p>How to Start： resolve yourself</p></blockquote><h2 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h2><ul><li><h3 id="Maybe-your-wife-cann’t-work"><a href="#Maybe-your-wife-cann’t-work" class="headerlink" title="Maybe your wife cann’t work"></a>Maybe your wife cann’t work</h3></li></ul><ol><li>Connect the wire-net<br><code>sudo pacman -S yay</code></li><li>Check your wireless network card model and download the corresponding driver<br><code>yay -S ...</code></li></ol><blockquote><p>eg: if your wireless network card is rtl18821ce<br><code>yay -S rtl18821ce-dkms-git</code> 3. Check your linux kernel and download the corresponding headers<br><code>sudo pacman -S linux000-headers</code></p></blockquote><blockquote><p>eg: if your linux kernel is 4.19<br><code>sudo pacman -S linux419-headers</code></p></blockquote><ol start="4"><li>Restart driver<br><code>sudo modprobe network-card-model</code><blockquote><p>eg: 8821ce<br><code>sudo modprobe 8821ce</code></p></blockquote></li></ol><h1 id="Change-Mirrors-To-China"><a href="#Change-Mirrors-To-China" class="headerlink" title="Change Mirrors To China"></a>Change Mirrors To China</h1><p><strong>First:</strong><br><code>sudo nano /etc/pacman.conf </code></p><p><strong>Add</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">【archlinuxcn】<br> SigLevel = Never<br> Server = https: <span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/archlinuxcn/</span><span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><p><strong>And Then</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">1. sudo pacman-mirrors -c China<br>2. sudo pacman -Syyu<br>3. reboot<br></code></pre></td></tr></table></figure><h1 id="Do-Config"><a href="#Do-Config" class="headerlink" title="Do Config"></a>Do Config</h1><ul><li><p><strong>Install editor</strong><br><code>sudo pacman -S neovim</code></p></li><li><p><strong>Shell: fish</strong></p></li></ul><ol><li><p>Install fish:<br><code>sudo pacman -S fish</code></p></li><li><p>Change shell to fish:<br><code>chsh -s /usr/bin/fish</code></p></li><li><p>Install fish extension:<br><code>curl -L https://get.oh-my.fish | fish</code></p></li><li><p>U can change theme by this command:<br><code>fish_config</code></p></li></ol><ul><li><strong>WM: i3</strong></li></ul><ol><li><p>Install i3WM:<br><code>sudo pacman -S i3</code></p></li><li><p><strong>Modify the i3-config</strong><br><code>git clone https:github.com/Xingmk/i3.git</code><br>or<br><code>nvim ~/.config/i3/config</code></p></li><li><p>Switch to i3WM:</p><blockquote><ol><li>Log out your account</li><li>In the lower right foot landing interface has a setting symbol click and select the i3 and landed</li></ol></blockquote></li></ol><ul><li><p><strong>Terminal: st</strong><br><code>git clone https:github.com/Xingmk/st.git</code></p></li><li><p><strong>Display</strong><br><code>sudo pacman -S feh variety picom</code></p></li><li><p><strong>Modify keyboard</strong></p></li></ul><ol><li><p>Install firstly xorg:<br><code>sudo pacman -S xorg</code></p></li><li><p>The export file:<br><code>xmodmap -pke &gt; ~/.xmodmap</code></p></li><li><p>Edit it:<br><code>~/.xmodmap</code></p></li></ol><ul><li><strong>Chinese input method</strong></li></ul><ol><li><p>Download fcitx5<br><code>sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-pinyin-zhwiki</code></p></li><li><p>Configure the environment variables<br><code>vim ~/.pam_environment</code></p></li></ol><p><strong>Add</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GTK_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx<br>QT_IM_MODULE  <span class="hljs-attribute">DEFAULT</span>=fcitx<br>XMODIFIERS    <span class="hljs-attribute">DEFAULT</span>=\@im=fcitx<br>SDL_IM_MODULE <span class="hljs-attribute">DEFAULT</span>=fcitx<br></code></pre></td></tr></table></figure><h1 id="Other-stuffs"><a href="#Other-stuffs" class="headerlink" title="Other stuffs"></a>Other stuffs</h1><ul><li><strong>Look IP Address</strong><br><code>curl cip.cc</code></li></ul><blockquote><p>If computer donn’t have voice</p></blockquote><ul><li><strong>Voice</strong><br><code>sudo pacman -S sof-firmware</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo pacman -S dmenu<br><br>sudo pacman -S paru yarn nodejs npm ccls python-pip<br><br>paru -S qqmusic-bin dingtalk-bin google-chrome-bin<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Manjaro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Manjaro-install</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
